const { bot } = require('./bot-setup');
const { updateSettings, getDb } = require('./db');
const whoisAndParse = require('./whois');
const { parseNic } = require('./parse');
const {
  instance,
} = require('./request');

bot.catch((err, ctx) => {
  console.error(`üöÄ ~ bot.catch ~ err for ${ctx.updateType}`, err);
});

bot.command('/start', (ctx) => {
  ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–ª–µ–¥–∏—Ç –∑–∞ –¥–æ–º–µ–Ω–∞–º–∏ –≤ –ö–∞–∑–Ω–µ—Ç–µ.\n–ê–≤—Ç–æ—Ä: @drugoi',
  );
});

bot.command('/proxy', async ({ message, reply }) => {
  if (message.entities.some((entity) => entity.type === 'url')) {
    const proxyUrl = message.text.replace('/proxy ', '');
    await updateSettings(proxyUrl);
    await reply('URL –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω');

    parseNic(instance);
  } else {
    await reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å URL –¥–ª—è –ø—Ä–æ–∫—Å–∏');
  }
});

bot.command('/disableproxy', async ({ reply }) => {
  await updateSettings('');
  await reply('–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞');

  parseNic(instance);
});

bot.command('/getproxy', async ({ reply }) => {
  const db = await getDb();
  const { proxy: proxyUrl } = await db.collection('settings').findOne({});
  await reply(proxyUrl || '–ü—Ä–æ–∫—Å–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
});

bot.command('/whois', async ({ message, reply }) => {
  try {
    const domain = message.text.replace('/whois', '');
    if (domain) {
      const whoisData = await whoisAndParse(domain, true);
      await reply(whoisData);
    } else {
      await reply('–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–æ–º–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ domain.com');
    }
  } catch (error) {
    console.error('üöÄ ~ bot.command ~ error:', error);
  }
});

module.exports = bot;
